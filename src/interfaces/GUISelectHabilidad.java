/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import personajes.Cazador;
import personajes.Licantropo;
import personajes.Personaje;
import personajes.Vampiro;
import practicamp.BaseDatos;
import practicamp.Usuario;

/**
 *
 * @author PcCom
 */
public class GUISelectHabilidad extends javax.swing.JFrame {

    int Opcion;
    Usuario Usuario;
    Personaje Pers;

    /**
     * Creates new form GUICrearPersonaje3
     */
    public GUISelectHabilidad(int opcion, Usuario usuario, Personaje pers) {
        initComponents();
        this.Opcion = opcion;
        this.Usuario = usuario;
        this.Pers = pers;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Numero = new javax.swing.JTextField();
        Valor = new javax.swing.JLabel();
        Mostrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Lista = new javax.swing.JList<>();
        Aceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Habilidades");

        Numero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumeroActionPerformed(evt);
            }
        });

        Valor.setText("Pulse mostrar");

        Mostrar.setText("Mostrar");
        Mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(Lista);

        Aceptar.setText("Aceptar");
        Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Valor)
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(Numero))
                        .addContainerGap(147, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Mostrar)
                                .addGap(8, 8, 8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Aceptar)
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1)
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Valor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Mostrar)
                    .addComponent(Aceptar))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void MostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarActionPerformed
        if (this.Opcion == 1) {
            Valor.setText("Seleccione la edad");
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Disciplina");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultListModel dlm = new DefaultListModel();
            int i = b.getListaDisciplinas().size();
            for (int j = 0; j < i; j++) {
                dlm.addElement(b.getListaDisciplinas().get(j).getName());
            }
            Lista.setModel(dlm);
        }
        if (this.Opcion == 2) {
            Valor.setText("Seleccione la altura (entre 50 y 100)");
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Don");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultListModel dlm = new DefaultListModel();
            int i = b.getListaDones().size();
            for (int j = 0; j < i; j++) {
                dlm.addElement(b.getListaDones().get(j).getName());
            }
            Lista.setModel(dlm);
        } else {
            Valor.hide();
            Numero.hide();
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Talento");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultListModel dlm = new DefaultListModel();
            int i = b.getListaTalentos().size();
            for (int j = 0; j < i; j++) {
                dlm.addElement(b.getListaTalentos().get(j).getName());
            }
            Lista.setModel(dlm);
        }
    }//GEN-LAST:event_MostrarActionPerformed

    private void NumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumeroActionPerformed

    private void AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarActionPerformed
        int Habilidad = Lista.getSelectedIndex();
        String a = Numero.getText();
        if (Opcion == 1) {
            Vampiro v = (Vampiro) Pers;
            v.setEdad(Integer.valueOf(a));
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Disciplina");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            v.setHabilidadespecial(b.getListaDisciplinas().get(Habilidad));
            Usuario.getPersonajes().add(v);
            try {
                b.DeserializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            b.actualizarUsuario(Usuario);
            try {
                b.SerializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            GUIMenuUsuario i = new GUIMenuUsuario(Usuario);
            i.setVisible(true);
            this.setVisible(false);
        } else if (Opcion == 2) {
            Licantropo l = (Licantropo) Pers;
            l.setTamaño(Integer.valueOf(a));
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Don");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            l.setHabilidadespecial(b.getListaDones().get(Habilidad));
            Usuario.getPersonajes().add(l);
            try {
                b.DeserializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            b.actualizarUsuario(Usuario);
            try {
                b.SerializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            GUIMenuUsuario i = new GUIMenuUsuario(Usuario);
            i.setVisible(true);
            this.setVisible(false);
        } else {

            Cazador c = (Cazador) Pers;
            BaseDatos b = new BaseDatos();
            try {
                b.DeserializePro("Talento");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            c.setHabilidadespecial(b.getListaTalentos().get(Habilidad));
            Usuario.getPersonajes().add(c);
            try {
                b.DeserializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            b.actualizarUsuario(Usuario);
            try {
                b.SerializePro("Usuario");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectHabilidad.class.getName()).log(Level.SEVERE, null, ex);
            }
            GUIMenuUsuario i = new GUIMenuUsuario(Usuario);
            i.setVisible(true);
            this.setVisible(false);
        }

    }//GEN-LAST:event_AceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUISelectHabilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUISelectHabilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUISelectHabilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUISelectHabilidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUISelectHabilidad(Opcion, Usuario, Pers).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aceptar;
    private javax.swing.JList<String> Lista;
    private javax.swing.JButton Mostrar;
    private javax.swing.JTextField Numero;
    private javax.swing.JLabel Valor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
