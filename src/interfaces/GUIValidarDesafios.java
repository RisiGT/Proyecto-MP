/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import habilidades.Debilidad;
import habilidades.Fortaleza;
import interfacesAdmin.GUIOperador;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import personajes.Personaje;
import practicamp.BaseDatos;
import practicamp.Combate;
import practicamp.Desafio;
import practicamp.GestorCombate;
import practicamp.NotificadorCombate;
import practicamp.Operador;
import practicamp.ResultadosCombate;
import practicamp.Usuario;

/**
 *
 * @author pcris
 */
public class GUIValidarDesafios extends javax.swing.JFrame {

    private Operador operador;
    @SuppressWarnings("unchecked")
    private List<Fortaleza> listaFortalezas1 = new ArrayList<>();
    @SuppressWarnings("unchecked")
    private List<Debilidad> listaDebilidades1 = new ArrayList<>();
    @SuppressWarnings("unchecked")
    private List<Fortaleza> listaFortalezas2 = new ArrayList<>();
    @SuppressWarnings("unchecked")
    private List<Debilidad> listaDebilidades2 = new ArrayList<>();

    /**
     * Creates new form GUIValidarDesafios
     */
    public GUIValidarDesafios(Operador operador) {
        initComponents();
        this.operador = operador;
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Aceptar = new javax.swing.JButton();
        MostrarDesafios = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaDesafios = new javax.swing.JList<>();
        MostrarDeb1 = new javax.swing.JButton();
        Rechazar = new javax.swing.JButton();
        MostrarFort1 = new javax.swing.JButton();
        MostrarDeb2 = new javax.swing.JButton();
        MostrarFort2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListaDeb1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListaFort1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        ListaDeb2 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        ListaFort2 = new javax.swing.JList<>();
        AñadirDeb1 = new javax.swing.JButton();
        AñadirFort1 = new javax.swing.JButton();
        AñadirDeb2 = new javax.swing.JButton();
        AñadirFort2 = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(728, 474));

        Aceptar.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        Aceptar.setText("Validar Desafio");
        Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarActionPerformed(evt);
            }
        });

        MostrarDesafios.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        MostrarDesafios.setText("Mostrar Desafios");
        MostrarDesafios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarDesafiosActionPerformed(evt);
            }
        });

        ListaDesafios.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        ListaDesafios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaDesafiosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaDesafios);

        MostrarDeb1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        MostrarDeb1.setText("Debilidades del desafiante");
        MostrarDeb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarDeb1ActionPerformed(evt);
            }
        });

        Rechazar.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        Rechazar.setText("Rechazar Desafio");
        Rechazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RechazarActionPerformed(evt);
            }
        });

        MostrarFort1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        MostrarFort1.setText("Fortalezas del desafiante");
        MostrarFort1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarFort1ActionPerformed(evt);
            }
        });

        MostrarDeb2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        MostrarDeb2.setText("Debilidades del desafiado");
        MostrarDeb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarDeb2ActionPerformed(evt);
            }
        });

        MostrarFort2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        MostrarFort2.setText("Fortalezas del desafiado");
        MostrarFort2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarFort2ActionPerformed(evt);
            }
        });

        ListaDeb1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(ListaDeb1);

        ListaFort1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(ListaFort1);

        ListaDeb2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jScrollPane4.setViewportView(ListaDeb2);

        ListaFort2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jScrollPane5.setViewportView(ListaFort2);

        AñadirDeb1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        AñadirDeb1.setText("Añadir");
        AñadirDeb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirDeb1ActionPerformed(evt);
            }
        });

        AñadirFort1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        AñadirFort1.setText("Añadir");
        AñadirFort1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirFort1ActionPerformed(evt);
            }
        });

        AñadirDeb2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        AñadirDeb2.setText("Añadir");
        AñadirDeb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirDeb2ActionPerformed(evt);
            }
        });

        AñadirFort2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        AñadirFort2.setText("Añadir");
        AñadirFort2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirFort2ActionPerformed(evt);
            }
        });

        Cancelar.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(MostrarDeb1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(AñadirDeb1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MostrarDesafios, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(MostrarFort1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                            .addComponent(AñadirFort1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Rechazar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(MostrarDeb2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(AñadirDeb2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(MostrarFort2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(AñadirFort2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jScrollPane3, jScrollPane4, jScrollPane5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(MostrarDesafios, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MostrarDeb1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MostrarFort1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MostrarDeb2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MostrarFort2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane5))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AñadirDeb2)
                    .addComponent(AñadirFort1)
                    .addComponent(AñadirDeb1)
                    .addComponent(AñadirFort2))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Rechazar)
                    .addComponent(Aceptar)
                    .addComponent(Cancelar))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane2, jScrollPane3, jScrollPane4, jScrollPane5});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {MostrarDeb1, MostrarDeb2, MostrarFort1, MostrarFort2});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void MostrarDesafiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarDesafiosActionPerformed
        BaseDatos b = new BaseDatos();
        DefaultListModel dlm1 = new DefaultListModel();
        try {
            b.deserializePro("Desafio");
        } catch (IOException ex) {
            Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
        }
        int i = b.getListadesafios().size();
        if (!(i == 0)) {
            boolean encontrado = false;
            for (int j = 0; j < i; j++) {
                if (b.getListadesafios().get(j).getEstado() == 1) {
                    dlm1.addElement(b.getListadesafios().get(j).getDesafiado().getNombre() + " vs "+ b.getListadesafios().get(j).getDesafiante().getNombre());
                    encontrado = true;
                }
            }
            if (encontrado) {
                ListaDesafios.setModel(dlm1);
            } else {
                JOptionPane.showMessageDialog(null, "No hay desafios para validar");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay desafios");
        }
    }//GEN-LAST:event_MostrarDesafiosActionPerformed

    @SuppressWarnings("unchecked")
    private void MostrarFort2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarFort2ActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
            DefaultListModel dlm1 = new DefaultListModel();
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Desafio desafio : b.getListadesafios()) {
                if (((desafio.getDesafiado().getNombre()+ " vs " + desafio.getDesafiante().getNombre()).equals(ListaDesafios.getSelectedValue())) && (desafio.getEstado() == 1)) {
                    int tipo = desafio.getPersonajeDesafiado().getTipo();
                    try {
                        b.deserializePro("Fortaleza");
                    } catch (IOException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (Fortaleza list : b.getListaFortalezas()) {
                        if (list.getTipo() == tipo) {
                            dlm1.addElement(list.getName());
                        }
                    }
                }
            }
            ListaFort2.setModel(dlm1);
        }// TODO add your handling code here:
    }//GEN-LAST:event_MostrarFort2ActionPerformed

    @SuppressWarnings("unchecked")
    private void MostrarDeb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarDeb1ActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
           
            DefaultListModel dlm1 = new DefaultListModel();
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Desafio desafio : b.getListadesafios()) {
                if (((desafio.getDesafiado().getNombre()+ " vs " + desafio.getDesafiante().getNombre()).equals(ListaDesafios.getSelectedValue())) && (desafio.getEstado() == 1)) {
                    int tipo = desafio.getPersonajeDesafiante().getTipo();
                    try {
           
                        b.deserializePro("Debilidad");
                    } catch (IOException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                    for (Debilidad list : b.getListaDebilidades()) {
                        if (list.getTipo() == tipo) {
                            dlm1.addElement(list.getName());
                        }
                    }
                }
            }
            ListaDeb1.setModel(dlm1);
        }// TODO add your handling code here:
    }//GEN-LAST:event_MostrarDeb1ActionPerformed

    @SuppressWarnings("unchecked")
    private void MostrarFort1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarFort1ActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
            DefaultListModel dlm1 = new DefaultListModel();
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Desafio desafio : b.getListadesafios()) {
                if (((desafio.getDesafiado().getNombre()+ " vs " + desafio.getDesafiante().getNombre()).equals(ListaDesafios.getSelectedValue())) && (desafio.getEstado() == 1)) {
                    int tipo = desafio.getPersonajeDesafiante().getTipo();
                    try {
                        b.deserializePro("Fortaleza");
                    } catch (IOException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (Fortaleza list : b.getListaFortalezas()) {
                        if (list.getTipo() == tipo) {
                            dlm1.addElement(list.getName());
                        }
                    }
                }
            }
            ListaFort1.setModel(dlm1);
        }
    }//GEN-LAST:event_MostrarFort1ActionPerformed

    @SuppressWarnings("unchecked")
    private void MostrarDeb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarDeb2ActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
            DefaultListModel dlm1 = new DefaultListModel();
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Desafio desafio : b.getListadesafios()) {
                if (((desafio.getDesafiado().getNombre()+ " vs " + desafio.getDesafiante().getNombre()).equals(ListaDesafios.getSelectedValue())) && (desafio.getEstado() == 1)) {
                    int tipo = desafio.getPersonajeDesafiado().getTipo();
                    try {
                        b.deserializePro("Debilidad");
                    } catch (IOException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (Debilidad list : b.getListaDebilidades()) {
                        if (list.getTipo() == tipo) {
                            dlm1.addElement(list.getName());
                        }
                    }
                }
            }
            ListaDeb2.setModel(dlm1);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_MostrarDeb2ActionPerformed

    private void RechazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RechazarActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                b.rechazarDesafio(ListaDesafios.getSelectedValue());
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            GUIOperador i = new GUIOperador(operador);
            i.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un desafío");
        }
    }//GEN-LAST:event_RechazarActionPerformed

    @SuppressWarnings("unchecked")
    private void AñadirDeb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirDeb1ActionPerformed
        if (!(ListaDeb1.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Debilidad");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
             ArrayList<Debilidad> listaDebTipo = new ArrayList<Debilidad>();
           
             Desafio desafioo = b.getListadesafios().get(ListaDesafios.getSelectedIndex());
             
             for (Debilidad debilidad : b.getListaDebilidades()) {
                    if (debilidad.getTipo()==(desafioo.getPersonajeDesafiante().getTipo())){
                        listaDebTipo.add(debilidad);
                    }
                        }
            int k = ListaDeb1.getSelectedIndex();
            listaDebilidades1.add(listaDebTipo.get(k));
            DefaultListModel dlm1 = new DefaultListModel();
          
            int i = listaDebTipo.size();
          
            boolean pertenece;
            

            
            for (int j = 0; j < i; j++) {
                pertenece = false;
                for (Debilidad debilidad: listaDebTipo) {
                    if (debilidad.getName().equals(listaDebTipo.get(j).getName())) {
                        pertenece = true;
                    }

                    if (pertenece) {
                        dlm1.addElement("");
                    } else {
                        dlm1.addElement(listaDebTipo.get(j).getName());
                    }
                }
                ListaDeb1.setModel(dlm1);
        
            } 
            
            
            
            
            
           /* try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } */
            for (Desafio desafio : b.getListadesafios()) {
                if (desafio.getDesafiado().getNombre().equals(ListaDesafios.getSelectedValue())) {
                    desafio.getPersonajeDesafiante().getDebilidades().add(b.getListaDebilidades().get(k));
                }
            }
            try {
                b.serializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una debilidad");
        }
    }//GEN-LAST:event_AñadirDeb1ActionPerformed

    @SuppressWarnings("unchecked")
    private void AñadirFort1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirFort1ActionPerformed
        if (!(ListaFort1.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Fortaleza");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            }
             try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
              ArrayList<Fortaleza> listaFortTipo = new ArrayList<Fortaleza>();
              Desafio desafioo = b.getListadesafios().get(ListaDesafios.getSelectedIndex());
              
               for (Fortaleza fortaleza : b.getListaFortalezas()) {
                    if (fortaleza.getTipo()==(desafioo.getPersonajeDesafiante().getTipo())){
                        listaFortTipo.add(fortaleza);
                    }
               }
             
            int k = ListaFort1.getSelectedIndex();
            listaFortalezas1.add(listaFortTipo.get(k));
            DefaultListModel dlm1 = new DefaultListModel();
            int i = listaFortTipo.size();
            
            boolean pertenece;
            
            for (int j = 0; j < i; j++) {
                pertenece = false;
                for (Fortaleza list : listaFortTipo) {
                    if (list.getName().equals(b.getListaFortalezas().get(j).getName())) {
                        pertenece = true;
                    }

                    if (pertenece) {
                        dlm1.addElement("");
                    } else {
                        dlm1.addElement(listaFortTipo.get(j).getName());
                    }
                }
                ListaFort1.setModel(dlm1);
            }
           /* try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } */
            for (Desafio desafio : b.getListadesafios()) {
                if (desafio.getDesafiado().getNombre().equals(ListaDesafios.getSelectedValue())) {
                    desafio.getPersonajeDesafiante().getFortalezas().add(b.getListaFortalezas().get(k));
                }
            }
            try {
                b.serializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fortaleza");
        }
    }//GEN-LAST:event_AñadirFort1ActionPerformed

    @SuppressWarnings({"unchecked", "unchecked"})
    private void AñadirFort2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirFort2ActionPerformed
         if (!(ListaFort2.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Fortaleza");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            }
             try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
              ArrayList<Fortaleza> listaFortTipo = new ArrayList<Fortaleza>();
              Desafio desafioo = b.getListadesafios().get(ListaDesafios.getSelectedIndex());
              
               for (Fortaleza fortaleza : b.getListaFortalezas()) {
                    if (fortaleza.getTipo()==(desafioo.getPersonajeDesafiado().getTipo())){
                        listaFortTipo.add(fortaleza);
                    }
               }
             
            int k = ListaFort2.getSelectedIndex();
            listaFortalezas2.add(listaFortTipo.get(k));
            DefaultListModel dlm1 = new DefaultListModel();
            int i = listaFortTipo.size();
            
            boolean pertenece;
            
            for (int j = 0; j < i; j++) {
                pertenece = false;
                for (Fortaleza list : listaFortTipo) {
                    if (list.getName().equals(b.getListaFortalezas().get(j).getName())) {
                        pertenece = true;
                    }

                    if (pertenece) {
                        dlm1.addElement("");
                    } else {
                        dlm1.addElement(listaFortTipo.get(j).getName());
                    }
                }
                ListaFort2.setModel(dlm1);
            }
           /* try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } */
            for (Desafio desafio : b.getListadesafios()) {
                if (desafio.getDesafiado().getNombre().equals(ListaDesafios.getSelectedValue())) {
                    desafio.getPersonajeDesafiante().getFortalezas().add(b.getListaFortalezas().get(k));
                }
            }
            try {
                b.serializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fortaleza");
        }
    }//GEN-LAST:event_AñadirFort2ActionPerformed

    @SuppressWarnings("unchecked")
    private void AñadirDeb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirDeb2ActionPerformed
         if (!(ListaDeb2.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Debilidad");
            } catch (IOException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUISelectEquipamiento.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
             ArrayList<Debilidad> listaDebTipo = new ArrayList<Debilidad>();
           
             Desafio desafioo = b.getListadesafios().get(ListaDesafios.getSelectedIndex());
             
             for (Debilidad debilidad : b.getListaDebilidades()) {
                    if (debilidad.getTipo()==(desafioo.getPersonajeDesafiado().getTipo())){
                        listaDebTipo.add(debilidad);
                    }
                        }
            int k = ListaDeb2.getSelectedIndex();
            listaDebilidades2.add(listaDebTipo.get(k));
            DefaultListModel dlm1 = new DefaultListModel();
          
            int i = listaDebTipo.size();
          
            boolean pertenece;
            

            
            for (int j = 0; j < i; j++) {
                pertenece = false;
                for (Debilidad debilidad: listaDebTipo) {
                    if (debilidad.getName().equals(listaDebTipo.get(j).getName())) {
                        pertenece = true;
                    }

                    if (pertenece) {
                        dlm1.addElement("");
                    } else {
                        dlm1.addElement(listaDebTipo.get(j).getName());
                    }
                }
                ListaDeb2.setModel(dlm1);
        
            } 
            
            
            
            
            
           /* try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } */
            for (Desafio desafio : b.getListadesafios()) {
                if (desafio.getDesafiado().getNombre().equals(ListaDesafios.getSelectedValue())) {
                    desafio.getPersonajeDesafiante().getDebilidades().add(b.getListaDebilidades().get(k));
                }
            }
            try {
                b.serializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una debilidad");
        }
    }//GEN-LAST:event_AñadirDeb2ActionPerformed

    private void AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarActionPerformed
        if (!(ListaDesafios.getSelectedValue() == null)) {
            BaseDatos b = new BaseDatos();
            try {
                b.deserializePro("Desafio");
            } catch (IOException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Desafio desafio : b.getListadesafios()) {
                if (desafio.getDesafiado().getNombre().equals(ListaDesafios.getSelectedValue())) {
                    Usuario desafiado = desafio.getDesafiado();
                    Usuario desafiante = desafio.getDesafiante();
                    System.out.println(desafiado.getNombre());
                    
                    LocalDate nombreF = LocalDate.now();
                    String fecha = nombreF.toString();
                    GestorCombate gest = new GestorCombate(desafio.getPersonajeDesafiante(), desafio.getPersonajeDesafiado(), desafio.getOro(), desafio.getOroDesafiado(), desafiante.getNombre(), desafiado.getNombre());
                    gest.generarCombate();
                    Combate comb = gest.getCombate();
                    ResultadosCombate res = new ResultadosCombate(desafiante.getNombre() + " vs " + desafiado.getNombre() + " - "+fecha, comb);
                    if (comb.getGanador().equals(desafiante.getNombre())) { //ha ganado el desafiante
                        res.setGanador(desafiante.getNombre());
                        desafio.getDesafiante().sumarOro(desafio.getOro());
                    } else { // gana el desafiado
                        res.setGanador(desafiado.getNombre());
                        desafiado.sumarOro(desafio.getOro());
                    }
                    desafio.getDesafiante().añadirCombate(res);
                    desafio.getDesafiado().añadirCombate(res);
                    
                    try {
                        b.deserializePro("Notificador");
                    } catch (IOException | ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     NotificadorCombate n = b.getNotificadorCombate();
                    try {
                        n.Actualizar(res);
                    } catch (IOException | ClassNotFoundException ex) {
                        Logger.getLogger(GUIValidarDesafios.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un desafío");
        }
        salir();

    }//GEN-LAST:event_AceptarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        salir();
    }//GEN-LAST:event_CancelarActionPerformed

    private void salir() {
        GUIOperador i = new GUIOperador(operador);
        i.setVisible(true);
        this.dispose();
    }
    
    @SuppressWarnings("unchecked")
    private void ListaDesafiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaDesafiosMouseClicked
        DefaultListModel dlm = new DefaultListModel();
        ListaFort1.setModel(dlm);
        ListaFort2.setModel(dlm);
        ListaDeb1.setModel(dlm);
        ListaDeb2.setModel(dlm);
    }//GEN-LAST:event_ListaDesafiosMouseClicked

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIValidarDesafios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIValidarDesafios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIValidarDesafios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIValidarDesafios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIValidarDesafios(operador).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aceptar;
    private javax.swing.JButton AñadirDeb1;
    private javax.swing.JButton AñadirDeb2;
    private javax.swing.JButton AñadirFort1;
    private javax.swing.JButton AñadirFort2;
    private javax.swing.JButton Cancelar;
    private javax.swing.JList<String> ListaDeb1;
    private javax.swing.JList<String> ListaDeb2;
    private javax.swing.JList<String> ListaDesafios;
    private javax.swing.JList<String> ListaFort1;
    private javax.swing.JList<String> ListaFort2;
    private javax.swing.JButton MostrarDeb1;
    private javax.swing.JButton MostrarDeb2;
    private javax.swing.JButton MostrarDesafios;
    private javax.swing.JButton MostrarFort1;
    private javax.swing.JButton MostrarFort2;
    private javax.swing.JButton Rechazar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
